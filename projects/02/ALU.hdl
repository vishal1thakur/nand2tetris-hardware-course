// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
   // 1. zx
   // Azx (zero the x input)
   Mux16(a=x, b[0..15]=false, sel=zx, out=xZeroed);

   // 2. nx

   // Negate x if nx is 1 (x or xZeroed from nx)
   Not16(in=xZeroed, out=notX);
   Mux16(a=xZeroed, b=notX, sel=nx, out=xProcessed);

   // 3. zy

   // 16-bit zero constant for y
   
   // Apply zy (zero the y input)
   Mux16(a=y, b[0..15]=false, sel=zy, out=yZeroed);

   // 4. ny
   // Negate y if ny is 1 (x or xZeroed from nx)
   Not16(in=yZeroed, out=notY);
   Mux16(a=yZeroed, b=notY, sel=ny, out=yProcessed); 

   // 5. f
   // x + y
   Add16(a=xProcessed, b=yProcessed, out=xyAdd);
   // x & y
   And16(a=xProcessed, b=yProcessed, out=xyAnd);
   // select between x + y , x & y on the basis of f
   Mux16(a=xyAnd, b=xyAdd, sel=f, out=xyF);

   // 6. no
   // negate xyF
   Not16(in=xyF, out=notXYF);
   Mux16(a=xyF, b=notXYF, sel=no, out=negateXYF);

   // 7. zr
   Or16Way(in=negateXYF,out=orXYF);  //for zr
   Not(in=orXYF,out=zr);


   // 8. ng
   // Check if MSB is 1
   And16(a[0..15]=true,b=negateXYF,out[15]=ng,out[0..14]=drop);

   // 9. out
   Or16(a=negateXYF,b[0..15]=false,out=out);
   
}